{"ast":null,"code":"import fetch from \"isomorphic-unfetch\";\nexport const getAllUsers = async () => {\n  try {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await res.json();\n    return {\n      robots: data\n    };\n  } catch (err) {}\n};\nexport const getAllUsersIds = async () => {\n  const data = await getAllUsers();\n  return data.robots.map(info => {\n    return {\n      params: {\n        id: info.id.toString()\n      }\n    };\n  });\n};\nexport const getUserInfo = async id => {\n  const {\n    robots\n  } = await getAllUsers();\n\n  for (ele in robots) {\n    if (robots[ele].id == id) {\n      return {\n        props: {\n          data: robots[ele]\n        }\n      };\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Yomi/Desktop/next-ssr/util/getUsers.js"],"names":["fetch","getAllUsers","res","data","json","robots","err","getAllUsersIds","map","info","params","id","toString","getUserInfo","ele","props"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACrC,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMF,KAAK,CAAC,4CAAD,CAAvB;AACA,UAAMG,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,WAAO;AACLC,MAAAA,MAAM,EAAEF;AADH,KAAP;AAGD,GAND,CAME,OAAOG,GAAP,EAAY,CAAE;AACjB,CARM;AAUP,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMJ,IAAI,GAAG,MAAMF,WAAW,EAA9B;AACA,SAAOE,IAAI,CAACE,MAAL,CAAYG,GAAZ,CAAiBC,IAAD,IAAU;AAC/B,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD,CATM;AAWP,OAAO,MAAMC,WAAW,GAAG,MAAOF,EAAP,IAAc;AACvC,QAAM;AAAEN,IAAAA;AAAF,MAAa,MAAMJ,WAAW,EAApC;;AACA,OAAKa,GAAL,IAAYT,MAAZ,EAAoB;AAClB,QAAIA,MAAM,CAACS,GAAD,CAAN,CAAYH,EAAZ,IAAkBA,EAAtB,EAA0B;AACxB,aAAO;AACLI,QAAAA,KAAK,EAAE;AACLZ,UAAAA,IAAI,EAAEE,MAAM,CAACS,GAAD;AADP;AADF,OAAP;AAKD;AACF;AACF,CAXM","sourcesContent":["import fetch from \"isomorphic-unfetch\";\r\n\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    const data = await res.json();\r\n    return {\r\n      robots: data,\r\n    };\r\n  } catch (err) {}\r\n};\r\n\r\nexport const getAllUsersIds = async () => {\r\n  const data = await getAllUsers();\r\n  return data.robots.map((info) => {\r\n    return {\r\n      params: {\r\n        id: info.id.toString(),\r\n      },\r\n    };\r\n  });\r\n};\r\n\r\nexport const getUserInfo = async (id) => {\r\n  const { robots } = await getAllUsers();\r\n  for (ele in robots) {\r\n    if (robots[ele].id == id) {\r\n      return {\r\n        props: {\r\n          data: robots[ele],\r\n        },\r\n      };\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}