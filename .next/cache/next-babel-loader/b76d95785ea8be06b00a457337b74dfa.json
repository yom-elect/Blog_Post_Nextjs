{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport fetch from \"isomorphic-unfetch\";\nexport var getAllUsers = function getAllUsers() {\n  var res, data;\n  return _regeneratorRuntime.async(function getAllUsers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://jsonplaceholder.typicode.com/users\"));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            robots: data\n          });\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\nexport var getAllUsersIds = function getAllUsersIds() {\n  var data;\n  return _regeneratorRuntime.async(function getAllUsersIds$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getAllUsers());\n\n        case 2:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", data.robots.map(function (info) {\n            return {\n              params: {\n                id: info.id.toString()\n              }\n            };\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getUserInfo = function getUserInfo(id) {\n  var _await$getAllUsers, robots;\n\n  return _regeneratorRuntime.async(function getUserInfo$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(getAllUsers());\n\n        case 2:\n          _await$getAllUsers = _context3.sent;\n          robots = _await$getAllUsers.robots;\n          _context3.t0 = _regeneratorRuntime.keys(robots);\n\n        case 5:\n          if ((_context3.t1 = _context3.t0()).done) {\n            _context3.next = 11;\n            break;\n          }\n\n          ele = _context3.t1.value;\n\n          if (!(robots[ele].id == id)) {\n            _context3.next = 9;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {\n            props: {\n              data: robots[ele]\n            }\n          });\n\n        case 9:\n          _context3.next = 5;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/Yomi/Desktop/next-ssr/util/getUsers.js"],"names":["fetch","getAllUsers","res","json","data","robots","getAllUsersIds","map","info","params","id","toString","getUserInfo","ele","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAELD,KAAK,CAAC,4CAAD,CAFA;;AAAA;AAEjBE,UAAAA,GAFiB;AAAA;AAAA,2CAGJA,GAAG,CAACC,IAAJ,EAHI;;AAAA;AAGjBC,UAAAA,IAHiB;AAAA,2CAIhB;AACLC,YAAAA,MAAM,EAAED;AADH,WAJgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAUP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACTL,WAAW,EADF;;AAAA;AACtBG,UAAAA,IADsB;AAAA,4CAErBA,IAAI,CAACC,MAAL,CAAYE,GAAZ,CAAgB,UAACC,IAAD,EAAU;AAC/B,mBAAO;AACLC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AADE;AADH,aAAP;AAKD,WANM,CAFqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAWP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOF,EAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACAT,WAAW,EADX;;AAAA;AAAA;AACjBI,UAAAA,MADiB,sBACjBA,MADiB;AAAA,kDAEbA,MAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEpBQ,UAAAA,GAFoB;;AAAA,gBAGnBR,MAAM,CAACQ,GAAD,CAAN,CAAYH,EAAZ,IAAkBA,EAHC;AAAA;AAAA;AAAA;;AAAA,4CAId;AACLI,YAAAA,KAAK,EAAE;AACLV,cAAAA,IAAI,EAAEC,MAAM,CAACQ,GAAD;AADP;AADF,WAJc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import fetch from \"isomorphic-unfetch\";\r\n\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    const data = await res.json();\r\n    return {\r\n      robots: data,\r\n    };\r\n  } catch (err) {}\r\n};\r\n\r\nexport const getAllUsersIds = async () => {\r\n  const data = await getAllUsers();\r\n  return data.robots.map((info) => {\r\n    return {\r\n      params: {\r\n        id: info.id.toString(),\r\n      },\r\n    };\r\n  });\r\n};\r\n\r\nexport const getUserInfo = async (id) => {\r\n  const { robots } = await getAllUsers();\r\n  for (ele in robots) {\r\n    if (robots[ele].id == id) {\r\n      return {\r\n        props: {\r\n          data: robots[ele],\r\n        },\r\n      };\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}